//This file contains various "boilerplate methods to check that the user is logged in and to handle authorization"


handleClientLoad = function() {
    gapi.client.setApiKey(apiKey)
    window.setTimeout(checkAuth,1)
    //checkAuth() //maybe don't need this line
    makeApiCall()
}

makeApiCall = function(){
    gapi.client.load('calendar', 'v3', function(){
	var request = gapi.client.calendar.events.list({
	    'calendarId' : 'luther.edu_quvl61clrh2gn04kpr49mcg7d8@group.calendar.google.com'})
	request.execute(function(resp) {
	    console.log("Right before Resp")
	    console.log(resp)
	    var calendarIds = []
	    for(var i=0;i<resp.items.length;i++){
		console.log(resp.items[i].start.dateTime)
		
	    }
	})
    })
	
}
////////////////////////////////////
checkAuth = function() {
    gapi.auth.authorize({client_id: clientId, scope: scopes, immdeiate: true},handleAuthResult)
}

handleAuthResult= function(authResult){
    var authorizeButton = document.getElementById("authorize_button")
    if (authResult && !authResult.error) {
	authorizeButton.style.visibility = "hidden"
	makeApiCall();
    } 
    else{
	authorizeButton.style.visibility = ''
	authorizeButton.onclick = handleAuthClick
    }
}

handleAuthClick = function(event){
    gapi.auth.authorize({client_id : clientId, scope : scopes, immediate : false},handleAuthResult )
    return false
}
///////////////////////////////////////
